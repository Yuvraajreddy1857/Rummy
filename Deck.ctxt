#BlueJ class context
comment0.params=n
comment0.target=Deck(int)
comment0.text=\n\ This\ is\ a\ parameterised\ constructor\ which\ creates\ a\ Deck\ object\ whick\ is\ an\ array\ of\ cards\ of\ desired\ length.\n\ @param\ n\ An\ integer\ containing\ the\ size\ of\ the\ Deck\ needed.\n
comment1.params=
comment1.target=Deck()
comment1.text=\n\ This\ is\ a\ non-parameterised\ constructor\ which\ creates\ a\ Deck\ object\ whick\ is\ an\ array\ of\ cards\ this\ array\ is\ fully\n\ populated\ and\ has\ 52\ Card\ objects.\ \n
comment10.params=low\ high
comment10.target=int\ randomInt(int,\ int)
comment10.text=\n\ This\ is\ a\ recursive\ method\ that\ takes\ any\ two\ limits(one\ higher\ and\ one\ lower)and\ return\ a\ random\ integer\ that\ lie\ between\ the\ limits(including\ both\ of\ them).\n\ @param\ low\ the\ integer\ that\ is\ the\ lower\ limit\ for\ the\ random\ number.\n\ @param\ high\ the\ integer\ that\ is\ the\ higher\ limit\ for\ the\ random\ number.\n\ @return\ int\ -\ a\ 'random'\ integer\ generated\ by\ the\ computer\n
comment11.params=deck\ low\ high
comment11.target=Deck\ subDeck(Deck,\ int,\ int)
comment11.text=\n\ This\ method\ takes\ a\ Deck\ and\ two\ indexes\ high\ and\ low\ to\ specify\ the\ range.\ It\ then\ creates\ a\ new\ Deck\ of\ length\n\ high-low+1\ and\ assigns\ the\ corresponding\ values\ of\ the\ earlier\ deck\ to\ the\ newly\ created\ Deck.\ It\ essentially\ \n\ replicates\ part\ of\ a\ given\ Deck.\n\ @param\ deck\ The\ master\ deck\ whose\ subDeck\ is\ needed.\n\ @param\ low\ The\ integer\ for\ the\ lower\ limit\ of\ the\ subDeck\ needed.\n\ @param\ high\ The\ integer\ for\ the\ higher\ limit\ of\ the\ subDeck\ needed.\n\ @return\ sub\ -\ The\ deck\ that\ is\ the\ subDeck\ of\ the\ master\ Deck\ as\ specified.\n
comment12.params=deck\ low\ high
comment12.target=Card\ findLowestCard(Deck,\ int,\ int)
comment12.text=\n\ This\ method\ finds\ the\ smallest\ card\ in\ the\ given\ Deck.\n\ @param\ deck\ The\ Deck\ in\ which\ the\ smallest\ Card\ is\ to\ be\ found.\n\ @param\ low\ the\ lower\ integer\ cnstrain\ above\ which\ the\ smallest\ Card\ is\ to\ be\ found.\n\ @param\ high\ the\ higher\ integer\ cnstrain\ above\ which\ the\ smallest\ Card\ is\ to\ be\ found.\n
comment13.params=deck
comment13.target=Deck\ sortDeck(Deck)
comment13.text=\n\ This\ is\ a\ sorting\ method\ which\ finds\ the\ lowest\ Card\ and\ switches\ it\ with\ the\ Card\ at\ the\ first\ place,\ then\ the\ second\ lowest\ Card\ is\ switched\ with\ the\ Card\ at\ the\n\ second\ place\ and\ so\ on.\n\ @param\ deck\ The\ Deck\ that\ needs\ to\ be\ sorted.\n\ @return\ A\ sorted\ version\ of\ the\ previous\ Deck.\n
comment14.params=deck
comment14.target=Deck\ insertionSort(Deck)
comment14.text=\n\ This\ is\ a\ sorting\ method\ that\ works\ on\ the\ algorithm\ of\ insertionSort.\n\ @param\ deck\ The\ Deck\ that\ needs\ to\ be\ sorted.\n\ @return\ A\ sorted\ version\ of\ the\ previous\ Deck.\n
comment15.params=deck
comment15.target=int[]\ nullHist(Deck)
comment15.text=\n\ This\ method\ takes\ a\ Deck\ object\ and\ eturns\ a\ integer\ histogram\ the\ length\ of\ the\ Deck\ where\ each\ int\ (-1(if\ nul)or\ 0)represents\ the\ presence\ of\ nulls.\n\ @param\ deck\ The\ Deck\ which\ may\ contain\ nulls\ and\ whise\ nullHist\ is\ needed.\n
comment16.params=a\ b
comment16.target=int\ findIndex(Deck,\ Card)
comment16.text=\n\ This\ method\ returns\ the\ index\ of\ a\ card\ in\ a\ deck(the\ index\ \ number\ by\ which\ the\ identical\ element\ is\ refered.\ \n\ to\ by).\n\ @param\ a\ The\ Deck\ in\ which\ the\ Card\ is\ to\ be\ found.\n\ @param\ b\ The\ Card\ which\ is\ to\ be\ found\ in\ the\ Deck.\n\ @return\ int\ -\ index\ of\ the\ Card\ in\ the\ Deck\n
comment17.params=b
comment17.target=int\ findIndex(Card)
comment17.text=\n\ This\ is\ an\ overLoaded\ version\ of\ findIndex\ that\ finds\ the\ index\ of\ a\ Card\ in\ a\ standard\ Deck.\n\ @param\ b\ The\ Card\ whose\ index\ is\ to\ be\ found\ out\ in\ a\ fully\ populated\ arranged\ Deck\ of\ Cards.\n\ @return\ int\ -\ The\ index\ of\ the\ ghiven\ Card\ in\ the\ fully\ populated\ arranged\ Deck\ if\ Cards.\n
comment18.params=deck
comment18.target=Deck\ makeSmaller(Deck)
comment18.text=\n\ This\ is\ a\ method\ that\ helps\ in\ avoiding\ NullPointerExceptions\ which\ occur\ very\ often\ when\ a\ loop\ traverses\ a\ deck\ and\ encounters\ a\ null\ object.\n\ This\ method\ takes\ a\ Deck\ whick\ may\ contain\ null\ objects\ and\ returns\ a\ new\ Deck\ which\ is\ void\ of\ nulls.\n\ @param\ deck\ A\ Deck\ object\ which\ may\ have\ null\ Cards\ which\ need\ to\ be\ removed.\n\ @return\ deck1\ -\ A\ copy\ of\ the\ parameter\ Deck\ except\ that\ this\ one\ does\ not\ have\ nulls\ that\ may\ have\ veen\ present\ in\ the\ parameter\ Deck.\n
comment19.params=deck
comment19.target=Deck\ makeBigger(Deck)
comment19.text=\n\ This\ method\ takes\ a\ Deck\ and\ returns\ a\ new\ Deck\ which\ is\ bigger\ by\ one\ Card(an\ extra\ Card\ object\ is\ added\ at\ the\ back\ of\ the\ Deck).\n\ @param\ deck\ A\ Deck\ which\ needs\ to\ be\ made\ bigger\ by\ one\ Crad.\n\ @return\ deck1\ -\ A\ Deck\ that\ is\ an\ exact\ replica\ of\ the\ parameter\ Deck\ except\ for\ a\ extra\ Card\ object\ in\ the\ ending.\n
comment2.params=
comment2.target=void\ shuffleDeck()
comment2.text=\n\ This\ method\ takes\ a\ Deck\ of\ Cards\ and\ then\ shuffles\ them\ up\ by\ swapping\ two\ cards\ at\ a\ time.\n
comment20.params=deck
comment20.target=int[]\ deckHist(Deck)
comment20.text=\n\ This\ method\ takes\ a\ Deck\ and\ returns\ a\ histogram\ which\ contains\ the\ frequency\ of\ each\ Card\ in\ the\ Deck.\n\ @param\ deck\ A\ Deck\ whose\ histogram\ is\ required(frequency\ of\ each\ Card).\n\ @return\ hist\ -\ an\ array\ of\ integers\ which\ contain\ values\ based\ on\ the\ frequency\ of\ the\ Cards\ in\ the\ Deck.\n
comment21.params=deck
comment21.target=int\ checkSequence(Deck)
comment21.text=\n\ This\ method\ takes\ a\ Deck\ and\ checks\ whether\ it\ has\ a\ sequence\ in\ it(a\ set\ of\ cards\ where\ there\ are\ no\ gaps\ between\ the\ cards).\n\ If\ it\ does,\ it\ returns\ the\ the\ index\ number\ of\ where\ it\ starts.\ However\ if\ there\ aren't\ any\ sequences,\ it\ returns\ -1;\n\ @param\ deck\ A\ Deck\ that\ needs\ to\ be\ checked\ for\ a\ sequence.\n\ @return\ \ int.\n
comment22.params=deck\ starting
comment22.target=int\ seqLength(Deck,\ int)
comment22.text=\n\ This\ method\ is\ normally\ invoked\ with\ right\ after\ Deck.checkSequence.\n\ It\ takes\ the\ index\ of\ where\ a\ sequence\ begins\ in\ a\ Deck\ and\ then\ returns\ the\ length\ of\ the\ sequence.\n\ @param\ deck\ The\ Deck\ in\ which\ there\ might\ be\ a\ sequence.\n\ @param\ starting\ The\ int\ for\ the\ first\ index\ of\ the\ sequence.\n\ @return\ length\ -\ The\ integer\ containing\ the\ length\ of\ the\ sequence.\n
comment23.params=deck
comment23.target=boolean\ isSequence(Deck)
comment23.text=\n\ This\ method\ checks\ if\ there\ is\ a\ sequence\ in\ the\ given\ Deck\ and\ returns\ a\ true\ if\ there\ is\ and\ a\ false\ if\ there\ is\ not.\n\ @param\ deck\ The\ Deck\ that\ is\ to\ be\ checked\ for\ the\ sequence.\n\ @return\ boolean\ -\ Depending\ upon\ whether\ there\ is\ a\ sequence\ in\ the\ Deck,\ a\ true\ if\ a\ sequence\ is\ present\ otherwise\ a\ alse.\n
comment24.params=deck
comment24.target=int\ findRangeLength(Deck)
comment24.text=\n\ This\ method\ finds\ the\ range\ of\ a\ deck\ (the\ number\ of\ cards\ between\ the\ biggest\ card\ and\ the\ smallest\ card).\n\ @param\ deck\ The\ Deck\ which\ ight\ be\ part\ of\ a\ sequence\ whose\ range\ needs\ to\ be\ found(index\ of\ highest\ card\ in\ the\ deck\ -\ index\ of\ lowest\ card\ in\ the\ Deck.\n\ @return\ int\ -\ The\ integer\ containing\ the\ range.\n
comment25.params=hand
comment25.target=boolean\ isPair(Deck)
comment25.text=\n\ This\ method\ checks\ for\ a\ pair.\ It\ returns\ true\ if\ the\ parameter\ Deck\ has\ a\ pair\ in\ it.\n\ A\ pair\ is\ a\ couple\ of\ Cards\ where\ both\ the\ cards\ have\ the\ same\ rank.\n\ @param\ deck\ The\ Deck\ which\ might\ contain\ a\ Pair\ and\ needs\ to\ be\ checked.\n\ @return\ isP\ -\ A\ boolean\ value\ to\ indicate\ whether\ there\ is\ a\ pair\ present\ in\ the\ Deck.\n
comment26.params=deck
comment26.target=int[]\ rankHist(Deck)
comment26.text=\n\ This\ method\ returns\ a\ histogram\ containing\ the\ number\ of\ Cards\ of\ each\ rank\ are\ there.\n\ @param\ deck\ A\ Deck\ whose\ rank\ histogram\ is\ needed.\n\ @return\ rankH\ -\ int[]\ containing\ integers\ for\ the\ number\ of\ times\ each\ rank\ appears\ in\ the\ Deck.\n
comment27.params=deck
comment27.target=int\ findSameRankSize(Deck)
comment27.text=\n\ This\ method\ finds\ the\ length\ of\ the\ deck\ with\ tha\ same\ ranks\ which\ it\ gets\ as\ parameters.\n\ This\ includes\ a\ pair,\ a\ triplet,\ a\ quadruple(four\ of\ a\ kind).\n\ @param\ deck\ A\ Deck\ object\ input.\n\ @return\ -\ int.\n
comment28.params=deck
comment28.target=int\ findRank(Deck)
comment28.text=\n\ This\ method\ finds\ the\ rank\ of\ the\ cards\ which\ are\ part\ of\ a\ pair/triplet/fourOfAKind.\n\ @param\ deck\ The\ Deck\ which\ contains\ the\ ranks.\n\ @return\ int\ -\ The\ integer\ containing\ the\ value\ of\ the\ rank\ which\ is\ part\ of\ the\ set.\n
comment29.params=deck
comment29.target=Deck\ rankSort(Deck)
comment29.text=\n\ This\ method\ is\ yet\ another\ srting\ algorithm\n\ This\ method\ has\ been\ written\ to\ cater\ to\ the\ needs\ of\ players\ who\ find\ it\ hard\ to\ visualise\ the\ Cards.\ Instead\ of\ returning\ a\ Deck\ sorted\ in\ the\ standard\ way,\ it\ returns\ a\ \n\ Deck\ that\ is\ sorted\ rank-wise.(the\ Aces(in\ suit\ wise\ order))\ come\ first,\ then\ the\ deuces\ and\ so\ on.\n\ It\ helps\ a\ player\ when\ he\ wants\ to\ make\ a\ triplet\ or\ a\ four\ of\ a\ kind\ in\ the\ game.\n\ @param\ deck\ The\ Deck\ which\ needs\ to\ be\ sorted\ rank-wise.\n\ @return\ Deck\ -\ A\ replica\ of\ the\ parameter\ Deck\ just\ that\ it\ is\ sorted\ rank-wise.\ \n
comment3.params=a
comment3.target=void\ copyDeck(Deck)
comment3.text=\n\ This\ is\ a\ non-static\ method\ which\ copies\ the\ larger\ of\ the\ two\ Decks\ onto\ this\ Deck.\n\ @param\ a\ A\ Deck.\n
comment4.params=
comment4.target=void\ moveUp()
comment4.text=\n\ This\ is\ a\ static\ method\ where\ all\ the\ cards\ in\ this\ Deck\ are\ shifted\ one\ place\ backwards(So\ the\ zeroeth\ card\ becomes\ the\ oneth\ card\ and\ so\ on).\ \n
comment5.params=
comment5.target=void\ moveDown()
comment5.text=\n\ This\ is\ a\ static\ method\ where\ all\ the\ cards\ in\ this\ Deck\ are\ shifted\ one\ place\ forward(So\ the\ oneth\ card\ becomes\ the\ zeroeth\ card\ and\ so\ on).\ \n
comment6.params=
comment6.target=void\ nullExchange()
comment6.text=\n\ It\ is\ an\ instance\ method\ where\ this\ Deck\ which\ may\ contain\ null\ objects\ is\ modified\ and\ the\ null\ objects\ are\ 'pushed'\ to\ the\ back\ of\ the\ Deck.\n\ NOTE\:\ PRESENTLY,\ IT\ DOES\ NOT\ WORK\ PROPERLY,\ HOWEVER,\ IT\ IS\ NOT\ NEEDED\ IN\ THIS\ VERSION\ OF\ THE\ GAME.\n
comment7.params=deck
comment7.target=void\ printDeck(Deck)
comment7.text=\n\ This\ method\ takes\ a\ Deck\ object\ and\ prints\ its\ contents\ in\ a\ user\ friendly\ format.\n\ @param\ Deck\ object\ that\ needs\ to\ be\ printed.\n\ \n
comment8.params=deck\ a\ b
comment8.target=void\ swapCard(Deck,\ int,\ int)
comment8.text=\n\ This\ method\ takes\ a\ Deck\ of\ Cards\ and\ two\ ints.\ It\ then\ swaps\ the\ references\ of\ the\ Cards\ at\ the\ two\ given\ indexes.\n\ @param\ deck\ A\ Deck\ in\ which\ the\ Cards\ need\ to\ be\ swapped.\n\ @param\ a\ An\ int\ containing\ one\ of\ the\ indexes\ of\ one\ of\ the\ Crads\ that\ needs\ to\ be\ swapped.\n\ @param\ b\ An\ int\ containing\ one\ of\ the\ indexes\ of\ one\ of\ the\ Crads\ that\ needs\ to\ be\ swapped.\n
comment9.params=a\ b
comment9.target=Deck\ copyDeck(Deck,\ Deck)
comment9.text=\n\ This\ is\ an\ overloaded\ version\ of\ copyDeck\ that\ is\ a\ semi\ modifier.\ It\ copies\ the\ contents\ of\ the\ second\ parameter\ Deck\ onto\ the\ first.\n\ @param\ a\ A\ deck\ into\ which\ the\ contents\ of\ the\ other\ Deck\ needs\ to\ be\ copied.\n\ @param\ a\ The\ Deck\ which\ needs\ to\ be\ replicated\ and\ returned.\n\ @return\ Deck\ -\ A\ deck\ which\ is\ a\ copy\ of\ Deck\ a.\n
numComments=30
