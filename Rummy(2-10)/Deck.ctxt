#BlueJ class context
comment0.params=n
comment0.target=Deck(int)
comment0.text=\n\ This\ is\ a\ parameterised\ constructor\ which\ creates\ a\ Deck\ object\ whick\ is\ an\ array\ of\ cards\ of\ desired\ length.\n
comment1.params=
comment1.target=Deck()
comment1.text=\n\ This\ is\ a\ non-parameterised\ constructor\ which\ creates\ a\ Deck\ object\ whick\ is\ an\ array\ of\ cards\ this\ array\ is\ fully\n\ populated\ and\ has\ 52\ Card\ objects.\ \n
comment10.params=deck
comment10.target=Deck\ sortDeck(Deck)
comment10.text=\n\ This\ is\ a\ sorting\ method\ which\ finds\ the\ lowest\ Card\ and\ switches\ it\ with\ the\ Card\ at\ the\ first\ place,\ then\ the\ second\ lowest\ Card\ is\ switched\ with\ the\ Card\ at\ the\ second\ place\n
comment11.params=deck
comment11.target=Deck\ insertionSort(Deck)
comment11.text=\n\ This\ is\ a\ sorting\ method\ that\ works\ on\ the\ algorithm\ of\ insertionSort.\n
comment12.params=a\ b
comment12.target=int\ findIndex(Deck,\ Card)
comment12.text=\n\ This\ method\ returns\ the\ index\ of\ a\ card\ in\ a\ deck(the\ index\ \ number\ by\ which\ the\ identical\ element\ is\ refered\ \n\ to\ by).\n\ @param\ Deck\ a\n\ @param\ Card\ b\n\ @return\ int\ (index\ of\ the\ card\ in\ the\ deck\n
comment13.params=b
comment13.target=int\ findIndex(Card)
comment14.params=deck
comment14.target=Deck\ makeSmaller(Deck)
comment14.text=\n\ This\ is\ a\ method\ that\ helps\ in\ avoiding\ NullPointerExceptions\ which\ occur\ very\ often\ when\ a\ loop\ traverses\ a\ deck\ and\ encounters\ a\ null\ object.\n\ This\ method\ takes\ a\ Deck\ whick\ may\ contain\ null\ objects\ and\ returns\ a\ new\ Deck\ which\ is\ void\ of\ nulls.\n
comment15.params=deck
comment15.target=Deck\ makeBigger(Deck)
comment15.text=\n\ This\ method\ takes\ a\ Deck\ and\ returns\ a\ new\ Deck\ which\ is\ bigger\ by\ one\ Card(an\ extra\ Card\ object\ is\ added\ at\ the\ back\ of\ the\ Deck)\n
comment16.params=deck
comment16.target=int[]\ deckHist(Deck)
comment16.text=\n\ This\ method\ takes\ a\ Deck\ and\ returns\ a\ histogram\ which\ represents\ the\ frequency\ of\ each\ Card\ in\ the\ Deck.\n
comment17.params=deck
comment17.target=int\ checkSequence(Deck)
comment17.text=\n\ This\ method\ takes\ a\ Deck\ and\ checks\ whether\ it\ has\ a\ sequence\ in\ it(a\ set\ of\ cards\ where\ there\ are\ no\ gaps\ between\ the\ cards).\n\ If\ it\ does,\ it\ returns\ the\ the\ index\ number\ of\ where\ it\ starts.\ However\ if\ there\ aren't\ any\ sequences,\ it\ returns\ -1;\n
comment18.params=deck\ starting
comment18.target=int\ seqLength(Deck,\ int)
comment18.text=\n\ This\ method\ is\ normally\ invoked\ with\ right\ after\ Deck.checkSequence.\n\ It\ takes\ the\ index\ of\ where\ a\ sequence\ begins\ in\ a\ Deck\ and\ then\ returns\ the\ length\ of\ the\ sequence.\n
comment19.params=deck
comment19.target=boolean\ isSequence(Deck)
comment2.params=deck
comment2.target=void\ printDeck(Deck)
comment2.text=\n\ This\ method\ takes\ a\ Deck\ object\ and\ prints\ its\ contents\ in\ a\ user\ friendly\ format.\n\ @param\ Deck\ object\ that\ needs\ to\ be\ printed.\n\ \n
comment20.params=deck
comment20.target=int\ isPartOfSequence(Deck)
comment21.params=deck
comment21.target=int\ findRangeLength(Deck)
comment22.params=args
comment22.target=void\ main(java.lang.String[])
comment3.params=deck\ a\ b
comment3.target=void\ swapCard(Deck,\ int,\ int)
comment3.text=\n\ This\ method\ takes\ a\ Deck\ of\ Cards\ and\ two\ ints.\ It\ then\ swaps\ the\ references\ of\ the\ Cards\ at\ the\ two\ given\ \n\ indexes\n
comment4.params=deck
comment4.target=Deck\ shuffleDeck(Deck)
comment4.text=\n\ This\ method\ takes\ a\ Deck\ of\ Cards\ and\ then\ shuffles\ them\ up\ by\ swapping\ two\ cards\ at\ a\ time.\n
comment5.params=a
comment5.target=void\ copyDeck(Deck)
comment5.text=\n\ This\ is\ a\ non-static\ method\ which\ returns\ a\ copy\ of\ the\ Deck\ it\ is\ invoked\ on.\n
comment6.params=
comment6.target=void\ moveUp()
comment6.text=\n\ This\ is\ a\ static\ method\ which\ returns\ the\ Deck\ object\ where\ all\ the\ cards\ have\ been\ shifted\ one\ place\ forward(So\ the\ oneth\ card\ becomes\ the\ zeroeth\ card\ and\ so\ on).\ \n
comment7.params=low\ high
comment7.target=int\ randomInt(int,\ int)
comment7.text=\n\ This\ is\ a\ recursive\ method\ that\ takes\ any\ two\ limits(one\ higher\ and\ one\ lower)and\ return\ a\ random\ integer\ that\ lie\ between\ the\ limits(including\ both\ of\ them).\n\ @param\ int\ low(lower\ limit),\ int\ high\ (higher\ limit)\n\ @return\ a\ random\ integer\ generated\ by\ the\ computer\n
comment8.params=deck\ low\ high
comment8.target=Deck\ subDeck(Deck,\ int,\ int)
comment8.text=\n\ This\ method\ takes\ a\ Deck\ and\ two\ indexes\ high\ and\ low\ to\ specify\ the\ range.\ It\ then\ creates\ a\ new\ Deck\ of\ length\n\ high-low+1\ and\ assigns\ the\ corresponding\ values\ of\ the\ earlier\ deck\ to\ the\ newly\ created\ Deck.\ It\ essentially\ \n\ replicates\ part\ of\ a\ given\ Deck.\n\ @param\ Deck\ deck\n\ @param\ int\ high\ (high\ index)\n\ @param\ int\ low\ (low\ index)\n\ @return\ Deck\n
comment9.params=deck\ low\ high
comment9.target=Card\ findLowestCard(Deck,\ int,\ int)
comment9.text=\n\ This\ method\ finds\ the\ smallest\ card\ in\ the\ given\ Deck.\n
numComments=23
